# Задание №4
# � Создайте модуль с функцией внутри.
# � Функция получает на вход загадку, список с возможными
# вариантами отгадок и количество попыток на угадывание.
# � Программа возвращает номер попытки, с которой была
# отгадана загадка или ноль, если попытки исчерпаны.
_data_dict = {}


def secrets(puzzle: str, answers: list[str], attempts: int = 3) -> int:
    print(f'Отгадай загадку:\n{puzzle}:')
    for attempt in range(1, attempts + 1):
        answer = input(f'Попытка {attempt}:\n').lower()
        if answer in answers:
            return attempt
    return 0


# if __name__ == '__main__':
#     in_answers = ['ель', 'елка', 'сосна']
#     result = secrets('Зимой и летом одним цветом', in_answers, 3)
#     print(f'Угадал с {result} попытки' if result > 0 else 'Не угадал')

# Задание №6
# � Добавьте в модуль с загадками функцию, которая
# принимает на вход строку (текст загадки) и число (номер
# попытки, с которой она угадана).
# � Функция формирует словарь с информацией о результатах
# отгадывания.
# � Для хранения используйте защищённый словарь уровня
# модуля.
# � Отдельно напишите функцию, которая выводит результаты
# угадывания из защищённого словаря в удобном для чтения
# виде.
# � Для формирования результатов используйте генераторное
# выражение.

def save(puzzle: str, count: int) -> {}:
    _data_dict.update({puzzle: count})


# Задание №5
# � Добавьте в модуль с загадками функцию, которая хранит
# словарь списков.
# � Ключ словаря - загадка, значение - список с отгадками.
# � Функция в цикле вызывает загадывающую функцию, чтобы
# передать ей все свои загадки.

def riddle_storage():
    dict_riddle = {
        'Зимой и летом одним цветом': ['ель', 'ёлка', 'сосна'],
        'Кто меня раздевает, тот слезы проливает': ['лук', 'луковица'],
        'Летом серый, зимой белый': ['заяц', 'зайчик']
    }
    for key, value in dict_riddle.items():
        result = secrets(key, value)
        save(key, result)
        print(f'Угадал с {result} попытки' if result > 0 else 'Не угадал')
        print()


# if __name__ == '__main__':
#     riddle_storage()


def show_result():
    result = (
        f'Загадку: {key} разгадали с попытки - {value}'
        if value > 0
        else f'Загадку: {key} не разгадали'
        for key, value in _data_dict.items()
    )
    print('\n'.join(result))


if __name__ == '__main__':
    riddle_storage()
    show_result()
